import{createRequire as E}from"module";import d from"path";import u from"fs-extra";import M from"yaml";import O from"yargs";function D(e){return e.data.map(n=>({name:n.name,modes:n.modes}))}function $(e){let{collection:n,tokens:o}=e.data;return Object.entries(o).map(([s,t])=>{let r=Object.entries(t.values).map(([i,a])=>({mode:i,value:a}));return{token:{name:s,collection:n},values:r}})}function v(e){return e.flatMap($)}function k(e,n){return{tokens:v(e),tokenCollections:D(n)}}function w(e,n){let o=[],s=[],t=e.data.collection,r=n.get(t);if(!r)return o.push({type:"INVALID_COLLECTION",message:`Collection '${t}' is not defined in collections.yaml`,collection:t}),{isValid:!1,errors:o,warnings:s};let i=new Set(r.modes);return Object.entries(e.data.tokens).forEach(([a,m])=>{let c=Object.keys(m.values),p=Array.from(i).filter(f=>!c.includes(f));p.length>0&&o.push({type:"MISSING_MODE",message:`Collection '${t}' token '${a}' must have values for all modes: ${p.join(", ")}`,tokenName:a,collection:t,mode:p.join(", ")});let l=c.filter(f=>f!=="default"&&!i.has(f));l.length>0&&s.push(`Token '${a}' has values for undefined modes: ${l.join(", ")}`)}),{isValid:o.length===0,errors:o,warnings:s}}function T(e,n){let o=[],s=[];return e.forEach(t=>{let r=w(t,n);o.push(...r.errors),s.push(...r.warnings)}),{isValid:o.length===0,errors:o,warnings:s}}function C(e,n){let o=e.replace(/^\$/,"").replace(/\./g,"-");return n?`--${n}-${o}`:`--${o}`}function x(e){return typeof e=="string"?e:e.toString()}function V(e,n,o){let s=e.values.find(r=>r.mode===n);if(!s)throw new Error(`No value found for token '${e.token.name}' in mode '${n}'`);return`${C(e.token.name,o)}: ${x(s.value)};`}function b(e,n,o,s){let t=n.map(r=>`  ${V(r,o,s)}`).join(`
`);return`${e} {
${t}
}`}function S(e){return e.map(({selector:n,tokens:o,mode:s,prefix:t})=>b(n,o,s,t)).join(`

`)}function y(e,n){let{prefix:o,banner:s="",selectors:t}=n,{tokens:r,tokenCollections:i}=e,a=i.flatMap(c=>{let p=r.filter(l=>l.token.collection===c.name);return c.modes.map(l=>{var g;let f=(g=t[c.name])==null?void 0:g[l];if(!f)throw new Error(`Selector for collection ${c.name} and mode ${l} is not defined`);return{selector:f,tokens:p,mode:l,prefix:o}})}),m=S(a);return`${s}${m}`}function A(e,n,o){let s=new Map(n.data.map(i=>[i.name,i])),t=T(e,s);if(!t.isValid)throw console.error("Token validation failed:"),t.errors.forEach(i=>{console.error(`  ${i.message}`)}),new Error("Token validation failed. Please fix the errors above.");t.warnings.length>0&&(console.warn("Token validation warnings:"),t.warnings.forEach(i=>{console.warn(`  ${i}`)}));let r=k(e,n);return y(r,o)}var h={generateCssVariables:A,generateCssVarsFromAst:y,createCssVarName:C};var P=E(import.meta.url),j=P.resolve("@cocso-ui/baseframe-sources"),F=d.dirname(j);function N(){process.stdout.write(`
\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557
\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D
\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  
\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255A\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2554\u2550\u2550\u255D  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255A\u2588\u2588\u2554\u255D\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255D  
\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255A\u2550\u255D \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557
\u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D     \u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u255D     \u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D

`)}function I(e){let n=[];function o(s){let t=u.readdirSync(s);for(let r of t){let i=d.join(s,r),a=u.statSync(i);a.isDirectory()?o(i):a.isFile()&&/\.ya?ml$/.test(r)&&n.push(i)}}return o(e),n}async function G(){let e=I(F),n=[],o=null;for(let s of e)try{let t=u.readFileSync(s,"utf-8"),r=M.parse(t);r.kind==="Tokens"?n.push(r):r.kind==="TokenCollections"&&(o=r)}catch(t){console.warn(`Failed to parse ${s}:`,t)}return{tokens:n,collections:o}}async function R(e,n){let{tokens:o,collections:s}=await G();s||(console.error("collections.yaml not found"),process.exit(1));let t=h.generateCssVariables(o,s,{prefix:n,banner:`/* Generated CSS Variables for Baseframe Design Tokens */
/* Generated at: ${new Date().toISOString()} */

`,selectors:{global:{default:":root"}}});await u.ensureDir(e);let r=d.join(e,"tokens.css");await u.writeFile(r,t,"utf-8"),console.log(` \u2705 Generated CSS variables: ${r}`)}O(process.argv.slice(2)).command("css-vars [dir]","Generate CSS variables",e=>e.positional("dir",{describe:"Output directory",type:"string",default:"./"}).option("prefix",{describe:"CSS variable prefix",type:"string"}),async e=>{N(),await R(e.dir,e.prefix)}).demandCommand(1,"You need to specify a command.").showHelpOnFail(!0).help().argv;
